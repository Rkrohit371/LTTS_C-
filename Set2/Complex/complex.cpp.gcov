        -:    0:Source:complex.cpp
        -:    0:Graph:complex.gcno
        -:    0:Data:complex.gcda
        -:    0:Runs:1
        -:    1:#include "complex.h"
        -:    2:#include<iostream>
        -:    3:#include<string>
        -:    4:#include<fstream>
        -:    5:
        -:    6:
        4:    7:Complex::Complex():m_real(0), m_imag(0) {};
        -:    8:
       10:    9:Complex::Complex(int a, int b) {
       10:   10:    m_real = a;
       10:   11:    m_imag = b;
       10:   12:}
        -:   13:
        1:   14:Complex::Complex(int a):m_imag(0) {
        1:   15:    m_real = a;
        1:   16:}
        -:   17:
        9:   18:int Complex::real() {
        9:   19:    return m_real;
        9:   19-block  0
        -:   20:}
        -:   21:
        9:   22:int Complex::image() {
        9:   23:    return m_imag;
        9:   23-block  0
        -:   24:}
        -:   25:
        1:   26:Complex Complex::operator+(const Complex &C) {
        1:   27:    Complex temp;
        1:   27-block  0
        1:   28:    temp.m_real = m_real + C.m_real;
        1:   29:    temp.m_imag = m_imag + C.m_imag;
        1:   30:    return temp;
        -:   31:}
        -:   32:
        1:   33:Complex Complex::operator-(const Complex &C) {
        1:   34:    Complex temp;
        1:   34-block  0
        1:   35:    temp.m_real = m_real - C.m_real;
        1:   36:    temp.m_imag = m_imag - C.m_imag;
        1:   37:    return temp;
        -:   38:}
        -:   39:
        1:   40:Complex Complex::operator*(const Complex &C) {
        1:   41:    Complex temp;
        1:   41-block  0
        1:   42:    temp.m_real = (m_real * C.m_real) - (m_imag * C.m_imag);
        1:   43:    temp.m_imag = (m_real * C.m_imag) + (m_imag * C.m_real);
        1:   44:    return temp;
        -:   45:}
        -:   46:
        1:   47:Complex& Complex::operator++() {
        1:   48:    m_real += 1;
        1:   49:    m_imag += 1;
        -:   50:
        1:   51:    return *this;
        1:   51-block  0
        -:   52:}
        -:   53:
        1:   54:Complex Complex::operator++(int) {
        1:   55:    Complex duplicate(*this);
        1:   56:    m_real += 1;
        1:   57:    m_imag += 1;
        -:   58:
        1:   59:    return duplicate;
        1:   59-block  0
        -:   60:}
        -:   61:
    #####:   62:bool Complex::operator==(const Complex &C) {
    #####:   63:    if(m_real == C.m_real && m_imag == C.m_imag) {
    %%%%%:   63-block  0
    %%%%%:   63-block  1
    #####:   64:        return 1;
    %%%%%:   64-block  0
        -:   65:    }
    #####:   66:    return 0;
    %%%%%:   66-block  0
        -:   67:}
        -:   68:
    #####:   69:std::ostream& operator<< (std::ostream &output, const Complex &temp) {
    #####:   70:    output<<"Complex number is: "<<temp.m_real<<" + "<<temp.m_imag<<"i"<<std::endl;
    %%%%%:   70-block  0
    #####:   71:    return output;
        -:   72:}
        -:   73:
    #####:   74:void Complex:: display() const {
    #####:   75:    std::cout<<"Complex number is: "<<m_real<<" + "<<m_imag<<"i"<<std::endl;
    %%%%%:   75-block  0
    #####:   76:    std::cout<<"--------------------------------"<<std::endl;
    #####:   77:}
