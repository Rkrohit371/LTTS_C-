        -:    0:Source:fraction.cpp
        -:    0:Graph:fraction.gcno
        -:    0:Data:fraction.gcda
        -:    0:Runs:1
        -:    1:#include<iostream>
        -:    2:#include<algorithm>
        -:    3:#include "fraction.h"
        -:    4:
        4:    5:Fraction::Fraction():m_numerator(0),m_denominator(1) {};
        -:    6:
        7:    7:Fraction::Fraction(int numerator, int denominator) {
        7:    8:    m_numerator = numerator;
        7:    9:    m_denominator = denominator;
        7:   10:}
        -:   11:
        1:   12:Fraction::Fraction(int numerator):m_denominator(1) {
        1:   13:    m_numerator = numerator;
        1:   14:}
        -:   15:
        6:   16:int Fraction::getNumerator() {
        6:   17:    return m_numerator;
        6:   17-block  0
        -:   18:}
        -:   19:
        6:   20:int Fraction::getDenominator() {
        6:   21:    return m_denominator;
        6:   21-block  0
        -:   22:}
        -:   23:
        1:   24:Fraction Fraction::operator+(const Fraction& obj) {
        1:   25:    Fraction temp;
        1:   25-block  0
        1:   26:    temp.m_numerator = m_numerator + obj.m_numerator;
        1:   27:    temp.m_denominator = m_denominator + obj.m_denominator;
        1:   28:    return temp;
        -:   29:}
        -:   30:
        1:   31:Fraction Fraction::operator-(const Fraction& obj) {
        1:   32:    Fraction temp;
        1:   32-block  0
        1:   33:    temp.m_numerator = m_numerator - obj.m_numerator;
        1:   34:    temp.m_denominator = m_denominator - obj.m_denominator;
        1:   35:    return temp;
        -:   36:}
        -:   37:
        1:   38:Fraction Fraction::operator*(const Fraction& obj) {
        1:   39:    Fraction temp;
        1:   39-block  0
        1:   40:    temp.m_numerator = m_numerator * obj.m_numerator;
        1:   41:    temp.m_denominator = m_denominator * obj.m_denominator;
        1:   42:    return temp;
        -:   43:}
        -:   44:
    #####:   45:Fraction Fraction::operator+(int) {
    #####:   46:    m_numerator = +m_numerator;
    #####:   47:    m_denominator = +m_denominator;
    #####:   48:    return Fraction(m_numerator, m_denominator);
    %%%%%:   48-block  0
        -:   49:}
        -:   50:
    #####:   51:Fraction Fraction::operator-(int) {
    #####:   52:    m_numerator = -m_numerator;
    #####:   53:    m_denominator = -m_denominator;
    #####:   54:    return Fraction(m_numerator, m_denominator);
    %%%%%:   54-block  0
        -:   55:}
        -:   56:
    #####:   57:bool Fraction::operator==(const Fraction &obj) {
    #####:   58:    return (m_numerator == obj.m_numerator && m_denominator == obj.m_denominator); 
    %%%%%:   58-block  0
    %%%%%:   58-block  1
    %%%%%:   58-block  2
    %%%%%:   58-block  3
    %%%%%:   58-block  4
        -:   59:}
        -:   60:
    #####:   61:bool Fraction::operator>(const Fraction &obj) {
    #####:   62:    return (m_numerator > obj.m_numerator && m_denominator > obj.m_denominator); 
    %%%%%:   62-block  0
    %%%%%:   62-block  1
    %%%%%:   62-block  2
    %%%%%:   62-block  3
    %%%%%:   62-block  4
        -:   63:}
        -:   64:
    #####:   65:bool Fraction::operator<(const Fraction &obj) {
    #####:   66:    return (m_numerator < obj.m_numerator && m_denominator < obj.m_denominator); 
    %%%%%:   66-block  0
    %%%%%:   66-block  1
    %%%%%:   66-block  2
    %%%%%:   66-block  3
    %%%%%:   66-block  4
        -:   67:}
        -:   68:
    #####:   69:Fraction Fraction::simplify() {
    #####:   70:    int d = std::__gcd(m_numerator, m_denominator);
    %%%%%:   70-block  0
    #####:   71:    m_numerator = m_numerator / d;
    #####:   72:    m_denominator = m_denominator / d;
    #####:   73:    return *this;
        -:   74:}
        -:   75:
    #####:   76:void Fraction::display() const {
    #####:   77:    std::cout<<"Numerator is: "<<m_numerator<<std::endl;
    %%%%%:   77-block  0
    #####:   78:    std::cout<<"Denominator is: "<<m_denominator<<std::endl;
    #####:   79:}
        -:   80:
    #####:   81:bool Fraction::isSimplest() const {
    #####:   82:    int d = std::__gcd(m_numerator, m_denominator);
    %%%%%:   82-block  0
    #####:   83:    if(d == 1){
    #####:   84:        return 1;
    %%%%%:   84-block  0
        -:   85:    } else {
    #####:   86:        return 0;
    %%%%%:   86-block  0
        -:   87:    }
        -:   88:}
        -:   89:
    #####:   90:std::ostream& operator<<(std::ostream &output, const Fraction &temp) {
    #####:   91:    output<<"Numerator is: "<<temp.m_numerator<<std::endl;
    %%%%%:   91-block  0
    #####:   92:    output<<"Denominator is: "<<temp.m_denominator<<std::endl;
    #####:   93:    return output;
        -:   94:}
